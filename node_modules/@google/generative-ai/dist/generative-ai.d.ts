import express from 'express';
import path from 'path';
import multer from 'multer';
import { fileURLToPath } from 'url';
import { GoogleGenerativeAI } from "@google/generative-ai";

// Initialize Express app
const app = express();
const port = process.env.PORT || 3000;

// Set EJS as the view engine
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Middleware to handle file uploads
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// Serve static files like images, CSS, JS
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

// Google API initialization
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'models/gemini-1.5-flash' });

// Route to render the page with summary and conversation history
app.get('/', (req, res) => {
  res.render('index', { 
    summary: 'Upload a PDF to get a summary and ask questions about it.',
    conversation: []
  });
});

// Route to handle PDF upload
app.post('/upload-pdf', upload.single('pdf'), async (req, res) => {
  const pdfBuffer = req.file.buffer;
  const result = await model.generateContent([
    {
      inlineData: {
        data: pdfBuffer.toString('base64'),
      },
      contentType: 'application/pdf',
    },
  ]);
  res.json({ summary: result.summary });
});

// Route to handle question submission
app.post('/ask-question', async (req, res) => {
  const { question } = req.body;
  const result = await model.generateContent([
    {
      inlineData: {
        data: question,
      },
      contentType: 'text/plain',
    },
  ]);
  res.json({ answer: result.answer });
});

// Start the server
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
